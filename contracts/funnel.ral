struct Entries { mut payer: Address, mut payee: Address, mut agent: Address, mut amount: U256, mut ts: U256 }

Contract Funnel(mut count: U256) {

	mapping[U256, Entries] entries
        


    event NewEntry(by: Address, to: Address, agent: Address, value: U256)

    enum ErrorCodes {
        SelfPay = 0
        AgentPay = 1
        DataMalfunction = 2
        LackOfBal = 3
    }

    

    
    @using(updateFields = true, checkExternalCaller = false, preapprovedAssets = true, assetsInContract = true)
    pub fn createEntry(amt: U256, to: Address, ag: Address) -> () {
        // Debug events can be helpful for error analysis
        emit Debug(`Running Create Entry`)

        let add = callerAddress!()
        assert!(add != to, ErrorCodes.SelfPay)
        assert!(add != ag, ErrorCodes.AgentPay)
        
        assert!(!entries.contains!(count + 1), ErrorCodes.DataMalfunction)
        
        let b1 = tokenRemaining!(add, ALPH)
        transferTokenToSelf!(add, ALPH, 100000000000000000 * amt)
        let b2 = tokenRemaining!(add, ALPH)
        assert!(b1 == b2 + 100000000000000000 * amt, ErrorCodes.LackOfBal)
        transferTokenFromSelf!(to, ALPH, 10000000000000000 * 9 * amt)
        transferTokenFromSelf!(ag, ALPH, 10000000000000000 * amt)

        let timestamp = blockTimeStamp!()
        let et = Entries { payer : add, payee: to, agent: ag, amount: amt, ts: timestamp }

        entries.insert!(add, count + 1, et)

        count = count + 1

        emit NewEntry(add, to, ag, amt)
    }


}
